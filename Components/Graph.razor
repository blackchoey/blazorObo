@using System.IO
@using Azure.Core
@using Microsoft.Graph
@using Microsoft.TeamsFx.Model
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential

@using Microsoft.Identity.Client;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration Configuration

<div>
    <h2>Get the user's profile photo</h2>
    <p>Click below to authorize this app to read your profile photo using Microsoft Graph.</p>
    <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" hidden="@(Profile != null)" @onclick="Reload">Authorize</FluentButton>
    @if (IsLoading)
    {
        <ProfileCard IsLoading="true" />
    }
    else if (!IsLoading && !string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="error">@ErrorMessage</div>
    }
    else if (!IsLoading && Profile != null)
    {
        <ProfileCard IsLoading="false" Profile="@Profile" UserPhotoUri="@UserPhotoUri" />
    }
</div>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }

    public bool IsLoading { get; set; }
    public User Profile { get; set; }
    public string UserPhotoUri { get; set; }

    private readonly string _scope = "User.Read";

    private async Task Reload()
    {
        IsLoading = true;
        AccessToken ssoToken = new AccessToken();

        try
        {
            //await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken());
            ssoToken = await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { }), new System.Threading.CancellationToken());
        }
        catch (ExceptionWithCode e)
        {
            if (e.Code == ExceptionCode.UiRequiredError)
            {
                if (!await GetConsent())
                {
                    IsLoading = false;
                    ErrorMessage = e.Message;
                    return;
                }
            }
            else
            {
                IsLoading = false;
                ErrorMessage = e.Message;
                return;
            }
        }

        var cca = ConfidentialClientApplicationBuilder.Create(Configuration["CLIENT_ID"])
            .WithTenantId("72f988bf-86f1-41af-91ab-2d7cd011db47")
            .WithClientSecret(Configuration["CLIENT_SECRET"])
            .Build();
        var graphToken = await cca.AcquireTokenOnBehalfOf(new List<string>() { "User.Read" }, new UserAssertion(ssoToken.Token)).ExecuteAsync();
        //Console.WriteLine(graphToken.AccessToken);

        //Profile = await graph.Me.Request().GetAsync();
        //UserPhotoUri = await GetPhotoAsync(graph);

        IsLoading = false;
        ErrorMessage = graphToken.AccessToken;
    }

    private async Task<bool> GetConsent()
    {
        try
        {
            await teamsUserCredential.LoginAsync(_scope);
            await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken());
            return true;
        }
        catch (ExceptionWithCode e)
        {
            return false;
        }
    }

    private GraphServiceClient GetGraphServiceClient()
    {
        var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential, _scope);
        var client = new GraphServiceClient(msGraphAuthProvider);
        return client;
    }

    private async Task<string> GetPhotoAsync(GraphServiceClient graph)
    {
        string userPhoto = "";
        try
        {
            var photoStream = await graph.Me.Photo.Content.Request().GetAsync();

            if (photoStream != null)
            {
                // Copy the photo stream to a memory stream
                // to get the bytes out of it
                var memoryStream = new MemoryStream();
                photoStream.CopyTo(memoryStream);
                var photoBytes = memoryStream.ToArray();

                // Generate a data URI for the photo
                userPhoto = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
            }
        }
        catch (Exception) { /* Unable to get the users photo */ }

        return userPhoto;
    }
}
